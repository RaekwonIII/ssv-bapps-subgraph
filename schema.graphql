type BApp @entity(immutable: false) {
  id: Bytes! # address
  owner: Account! # address
  tokens: [Bytes!]! # addresses
  sharedRiskLevel: BigInt!
  metadataURI: String
  strategies: [StrategyBAppOptIn!]! @derivedFrom(field: "bApp")
}

type Strategy @entity(immutable: false) {
  id: String! # uint256
  strategyId: BigInt! # uint256
  owner: Account! # address
  fee: BigInt! # uint256
  feeProposed: BigInt! # uint256
  feeUpdateTime: BigInt! # uint256
  bApps: [StrategyBAppOptIn!]! @derivedFrom(field: "strategy")
  balances: [StrategyTokenBalance!]! @derivedFrom(field: "strategy")
}

type StrategyBAppOptIn @entity(immutable: false) {
  id: String! # Set to `strategy.id.concat(bApp.id)`
  strategy: Strategy!
  bApp: BApp!
  obligations: [Obligation!]!
}

type Obligation @entity(immutable: false) {
  id: String! # Set to `StrategyBAppOptIn.id.concat(token.id)`
  token: Bytes! # address
  percentage: BigInt!
}

type StrategyTokenBalance @entity(immutable: false) {
  id: String! # Set to `strategy.id.concat(account.id.concat(token.id))`
  depositor: Account!
  strategy: Strategy!
  token: Bytes! # address
  balance: BigInt!
}

type Account @entity(immutable: false) {
  id: Bytes! # address
  bApps: [BApp!]! @derivedFrom(field: "owner")
  strategies: [Strategy!]! @derivedFrom(field: "owner")
  totalDelegatedPercentage: BigInt! # uint256
  # TODO: to be verified, these are likely to have to be inverted
  delegators: [Delegation!]! @derivedFrom(field: "delegator")
  receivers: [Delegation!]! @derivedFrom(field: "receiver")
  strategyTokenBalances: [StrategyTokenBalance!]! @derivedFrom(field: "depositor")
}

type Delegation @entity(immutable: false) {
  id: String! # Set to `account.id.concat(account.id)` (delegator => receiver)
  delegator: Account!
  receiver: Account!
  percentage: BigInt!
}

type BAppObligationSet @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  bApp: Bytes! # address
  token: Bytes! # address
  obligationPercentage: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAppObligationUpdated @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  bApp: Bytes! # address
  token: Bytes! # address
  obligationPercentage: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAppOptedIn @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  bApp: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAppRegistered @entity(immutable: true) {
  id: Bytes!
  bAppAddress: Bytes! # address
  owner: Bytes! # address
  from: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BAppTokensUpdated @entity(immutable: true) {
  id: Bytes!
  bAppAddress: Bytes! # address
  tokens: [Bytes!]! # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DelegatedBalance @entity(immutable: true) {
  id: Bytes!
  delegator: Bytes! # address
  receiver: Bytes! # address
  percentage: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MaxFeeIncrementSet @entity(immutable: true) {
  id: Bytes!
  newMaxFeeIncrement: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ObligationUpdateFinalized @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  account: Bytes! # address
  token: Bytes! # address
  percentage: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ObligationUpdateProposed @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  account: Bytes! # address
  token: Bytes! # address
  percentage: BigInt! # uint32
  finalizeTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveDelegatedBalance @entity(immutable: true) {
  id: Bytes!
  delegator: Bytes! # address
  receiver: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyCreated @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyDeposit @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  contributor: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyFeeUpdateRequested @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  owner: Bytes! # address
  proposedFee: BigInt! # uint32
  fee: BigInt! # uint32
  expirationTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyFeeUpdated @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  owner: Bytes! # address
  fee: BigInt! # uint32
  oldFee: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyWithdrawal @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  contributor: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawalETHFinalized @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  account: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawalETHProposed @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  account: Bytes! # address
  amount: BigInt! # uint256
  finalizeTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawalFinalized @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  account: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawalProposed @entity(immutable: true) {
  id: Bytes!
  strategyId: BigInt! # uint256
  account: Bytes! # address
  token: Bytes! # address
  amount: BigInt! # uint256
  finalizeTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
